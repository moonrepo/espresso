---
source: crates/compiler/tests/target_output_test.rs
expression: "read_file(out_dir.join(\"index.mjs\"))"
---
function _async_generator(gen) {
    var front, back;
    function send(key, arg) {
        return new Promise(function(resolve, reject) {
            var request = {
                key: key,
                arg: arg,
                resolve: resolve,
                reject: reject,
                next: null
            };
            if (back) {
                back = back.next = request;
            } else {
                front = back = request;
                resume(key, arg);
            }
        });
    }
    function resume(key, arg) {
        try {
            var result = gen[key](arg);
            var value = result.value;
            var wrappedAwait = value instanceof _await_value;
            Promise.resolve(wrappedAwait ? value.wrapped : value).then(function(arg) {
                if (wrappedAwait) {
                    resume("next", arg);
                    return;
                }
                settle(result.done ? "return" : "normal", arg);
            }, function(err) {
                resume("throw", err);
            });
        } catch (err) {
            settle("throw", err);
        }
    }
    function settle(type, value) {
        switch(type){
            case "return":
                front.resolve({
                    value: value,
                    done: true
                });
                break;
            case "throw":
                front.reject(value);
                break;
            default:
                front.resolve({
                    value: value,
                    done: false
                });
                break;
        }
        front = front.next;
        if (front) {
            resume(front.key, front.arg);
        } else {
            back = null;
        }
    }
    this._invoke = send;
    if (typeof gen.return !== "function") {
        this.return = undefined;
    }
}
if (typeof Symbol === "function" && Symbol.asyncIterator) {
    _async_generator.prototype[Symbol.asyncIterator] = function() {
        return this;
    };
}
_async_generator.prototype.next = function(arg) {
    return this._invoke("next", arg);
};
_async_generator.prototype.throw = function(arg) {
    return this._invoke("throw", arg);
};
_async_generator.prototype.return = function(arg) {
    return this._invoke("return", arg);
};
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _await_value(value) {
    this.wrapped = value;
}
function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}
function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _wrap_async_generator(fn) {
    return function() {
        return new _async_generator(fn.apply(this, arguments));
    };
}
var _obj;
var _private = new WeakMap();
export class ClassName {
    method() {
        _class_private_field_set(this, _private, false);
    }
    constructor(){
        _define_property(this, "field", 123);
        _class_private_field_init(this, _private, {
            writable: true,
            value: true
        });
        _define_property(this, "anonMethod", ()=>{
            this.field = 456789;
            console.log(_class_private_field_get(this, _private));
        });
    }
}
_define_property(ClassName, "field", 'abc');
(()=>{
    ClassName.field = 'xyz';
})();
export function asyncFunc() {
    return _asyncFunc.apply(this, arguments);
}
function _asyncFunc() {
    _asyncFunc = _async_to_generator(function*(...args) {
        return Promise.resolve();
    });
    return _asyncFunc.apply(this, arguments);
}
export function* genFunc(value = 'abc') {
    yield 1;
}
export function asyncGenFunc() {
    return _asyncGenFunc.apply(this, arguments);
}
function _asyncGenFunc() {
    _asyncGenFunc = _wrap_async_generator(function*() {
        yield 'abc';
    });
    return _asyncGenFunc.apply(this, arguments);
}
const obj = {
    a: 1,
    b: 2,
    c: 3
};
const { a, b, c } = obj;
const [d, e, f] = [
    1,
    2,
    3
];
var _ref, _ref1;
const nullable = (_ref1 = (_ref = 1) !== null && _ref !== void 0 ? _ref : 2) !== null && _ref1 !== void 0 ? _ref1 : 3;
const optional = ((_obj = obj) === null || _obj === void 0 ? void 0 : _obj.a) || 0;
let assign = 0;
assign || (assign = a);
assign && (assign = b);
assign !== null && assign !== void 0 ? assign : assign = b; // Note: Can't test React because we don't have node modules!
 // export function Component() {
 // 	return <div />;
 // }
 /*#__PURE__*/ 

