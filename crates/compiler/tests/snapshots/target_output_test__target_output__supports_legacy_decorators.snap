---
source: crates/compiler/tests/target_output_test.rs
expression: "read_file(out_dir.join(\"index.mjs\"))"
---
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _ts_decorate(decorators, target, key, desc) {
    var c1 = arguments.length, r = c1 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d1;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d1 = decorators[i]) r = (c1 < 3 ? d1(r) : c1 > 3 ? d1(target, key, r) : d1(target, key)) || r;
    return c1 > 3 && r && Object.defineProperty(target, key, r), r;
}
function _ts_metadata(k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
function _ts_param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
export let Foo = class Foo {
    method(verbose) {}
    constructor(){
        _define_property(this, "greeting", void 0);
    }
};
_ts_decorate([
    format('Hello, %s'),
    _ts_metadata("design:type", String)
], Foo.prototype, "greeting", void 0);
_ts_decorate([
    c(),
    d('arg'),
    _ts_param(0, required),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", [
        Boolean
    ])
], Foo.prototype, "method", null);
Foo = _ts_decorate([
    a,
    b('arg')
], Foo);

